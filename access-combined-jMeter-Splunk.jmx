<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Access Combined Logs to Splunk" enabled="true">
      <stringProp name="TestPlan.comments">Example that sends test logs of type access combined to Splunk over the HEC protocol</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Main Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">100</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">25</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Get JSessionID" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String jSessionId = &quot;${__RandomString(10,qwertyuiopasdfghjklzxcvbnm1234567890)}&quot;;
//log.info(&quot;jSessionId: &quot; + jSessionId );
vars.put(&apos;jSessionId&apos;,jSessionId);</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Get Simple Random Variables" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">vars.put(&apos;httpBytes&apos;, org.apache.commons.lang3.RandomUtils.nextInt(100,9000).toString());

String curTimestamp = &quot;${__timeShift(dd/MM/yyyy:HH:mm:ss,,,,)}&quot;;
vars.put(&apos;requestTimestamp&apos;,curTimestamp);
</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Get Common Variables from lists" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">def getRandomVar(varOptions,outputVar) { 
   	varIdx = org.apache.commons.lang3.RandomUtils.nextInt(0,varOptions.size());
   	vars.put(outputVar, varOptions[varIdx]);
   	//log.info &apos;======&apos;;
	//log.info(&quot;Options: &quot; + varOptions +&quot;, Idx: &quot;+varIdx);
	//log.info(&quot;Variable: &quot; + outputVar );
	//log.info(&quot;Variable value: &quot; + vars.get(outputVar));
   	//log.info &apos;======&apos;;
   	
}

String[] actionOptions  = [&apos;view&apos;,&apos;save&apos;,&apos;delete&apos;,&apos;purchase&apos;,&apos;add&apos;]
getRandomVar(actionOptions,&apos;action&apos;);

String[] hostOptions  = [&apos;www1&apos;,&apos;www2&apos;,&apos;www3&apos;];
getRandomVar(hostOptions,&apos;host&apos;);

String[] methodOptions  = [&apos;POST&apos;,&apos;GET&apos;];
getRandomVar(methodOptions,&apos;method&apos;);

//log.info(&quot;Class: &quot;+methodOptions.getClass());
// ------------------------------
// IP Address Start
def ipArrList = []
int count = 1;
int ipCount = 50;
while(count&lt;ipCount+1) {
	ipArrList &lt;&lt; &quot;192.168.1.&quot;+count.toString();
	count++;
}

def ipList = ipArrList.toList()
//log.info(&quot;Class: &quot;+ipList.getClass());
getRandomVar(ipList,&apos;sourceIP&apos;);
// IP Address End

</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Get User Agent from list" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">def getRandomVar(varOptions,outputVar) { 
   	varIdx = org.apache.commons.lang3.RandomUtils.nextInt(0,varOptions.size());
   	vars.put(outputVar, varOptions[varIdx]);
   	//log.info &apos;======&apos;;
	//log.info(&quot;Options: &quot; + varOptions +&quot;, Idx: &quot;+varIdx);
	//log.info(&quot;Variable: &quot; + outputVar );
	//log.info(&quot;Variable value: &quot; + vars.get(outputVar));
   	//log.info &apos;======&apos;;
   	
   	
}
String[] userAgentOptions  = [&apos;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36&apos;,
&apos;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:53.0) Gecko/20100101 Firefox/53.0&apos;,
&apos;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.79 Safari/537.36 Edge/14.14393&apos;,&apos;Mozilla/5.0 (iPhone; CPU iPhone OS 10_3_1 like Mac OS X) AppleWebKit/603.1.30 (KHTML, like Gecko) Version/10.0 Mobile/14E304 Safari/602.1&apos;,
&apos;Mozilla/5.0 (Linux; Android 6.0.1; SAMSUNG SM-G570Y Build/MMB29K) AppleWebKit/537.36 (KHTML, like Gecko) SamsungBrowser/4.0 Chrome/44.0.2403.133 Mobile Safari/537.36&apos;]

getRandomVar(userAgentOptions,&apos;userAgent&apos;);

</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Get Weighted Variables" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">def getWeightedRandomVar(varMap,outputVar) { 
	def list = []
	// `entry` is a map entry, `i` the index in the map
	varMap.eachWithIndex { entry, i -&gt;
	    //log.info( &quot;$i - Key: $entry.key Value: $entry.value&quot;)
	    int count = 0;
	    int entryValue = entry.value
	
		while(count&lt;entry.value) {
		    //log.info(&quot;Count: &quot;+ count +&quot; for &quot;+entry.key);
		    list &lt;&lt; entry.key.toString()
		    count++;
		 }
	}

	//log.info(&quot;List: &quot;+ list);
	varIdx = org.apache.commons.lang3.RandomUtils.nextInt(0,list.size());
	vars.put(outputVar, list[varIdx]);
	//log.info(&quot;Selected: &quot;+ list[varIdx]);
}


// This is a map of the HTTP status code and the weight to apply to it in the distribution of data
def statusMap = [
        200 	: 95,
        503	: 2,
        404 	: 1
]
getWeightedRandomVar(statusMap,&apos;httpStatus&apos;);

// This is a map of the referer URL and the weight to apply to it in the distribution of data
def refererMap = [
        &quot;http://www.buttercupgames.com&quot; 	: 80,
        &quot;http://www.google.com&quot;			: 10,
        &quot;http://www.yahoo.com&quot; 			: 6,
        &quot;http://www.bing.com&quot;				: 4
]

getWeightedRandomVar(refererMap,&apos;httpReferer&apos;);






</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Get Weighted URL from list" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">def getWeightedRandomVar(varMap,outputVar) { 
	def list = []
	
	// `entry` is a map entry, `i` the index in the map
	varMap.eachWithIndex { entry, i -&gt;
	    //log.info( &quot;$i - Key: $entry.key Value: $entry.value&quot;)
	    int count = 0;
	    int entryValue = entry.value
	
		while(count&lt;entry.value) {
		    //log.info(&quot;Count: &quot;+ count +&quot; for &quot;+entry.key);
		    list &lt;&lt; entry.key.toString()
		    count++;
		 }
	}
	//log.info(&quot;List: &quot;+ list);
	varIdx = org.apache.commons.lang3.RandomUtils.nextInt(0,list.size());
	vars.put(outputVar, list[varIdx]);
	//log.info(&quot;Selected: &quot;+ list[varIdx]);
}

def uriPathMap = [
        &quot;cart.do&quot; 			: 20,
        &quot;product.screen&quot;		: 5,
        &quot;productscreen.html&quot; 	: 5,
        &quot;show.do&quot;			: 5,
        &quot;error.do&quot;			: 1
]

getWeightedRandomVar(uriPathMap,&apos;uriPath&apos;);
fullUri=&quot;/&quot;+ vars.get(&quot;uriPath&quot;)+&quot;?JSESSIONID=&quot;+vars.get(&quot;jSessionId&quot;);
//log.info(&quot;fullUri: &quot;+ fullUri);
vars.put(&apos;uriPath&apos;,fullUri);
//vars.put(uriPath, &quot;/&quot;+ vars.get(&quot;uriPath&quot;)+&quot;&amp;JSESSIONID=&quot;+vars.get(&quot;jSessionId&quot;));

</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post log to splunk HEC" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;sourcetype&quot;: &quot;access_combined&quot;,&quot;host&quot;:&quot;${host}&quot;, &quot;event&quot;:&quot;${sourceIP} - - [${requestTimestamp}] \&quot;${method} ${uriPath} HTTP 1.1\&quot; ${httpStatus} ${httpBytes} \&quot;${httpReferer}\&quot; \&quot;${userAgent}\&quot; 360&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${SPLUNK_HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${MGT_PORT}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">services/collector/event</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">This is the section that actually performs the post to the Splunk HTTP Event Collector</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">300</stringProp>
            <stringProp name="RandomTimer.range">100.0</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
        </hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Splunk ${HEC_TOKEN}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">content-type</stringProp>
              <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySamplerProperties">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugPostProcessor>
        <hashTree/>
      </hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Splunk Host Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="SPLUNK_HOST" elementType="Argument">
            <stringProp name="Argument.name">SPLUNK_HOST</stringProp>
            <stringProp name="Argument.value">127.0.0.1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MGT_PORT" elementType="Argument">
            <stringProp name="Argument.name">MGT_PORT</stringProp>
            <stringProp name="Argument.value">8088</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="HEC_TOKEN" elementType="Argument">
            <stringProp name="Argument.name">HEC_TOKEN</stringProp>
            <stringProp name="Argument.value">9f7e62c2-8afb-46a9-a049-97edc6b835d3</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
